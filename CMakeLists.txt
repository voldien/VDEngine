CMAKE_MINIMUM_REQUIRED( VERSION 3.11.0 FATAL_ERROR )
PROJECT(vdengine VERSION 0.11.1 LANGUAGES C CXX)
# Build shared/dynamic library option
OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
OPTION(BUILD_WITH_COVERAGE "Enable profiling and coverage report analysis." OFF)
OPTION(BUILD_WITH_PROFILER "Enable profiling." OFF)
OPTION(BUILD_WITH_EXTERNAL_PROJECT "Enable external project build." ON)
OPTION(BUILD_WITH_INSTALL "Disable this if you want to use fragengine as a submodule." ON )
OPTION(BUILD_WITH_UBSAN "" OFF)
OPTION(BUILD_WITH_ASAN "Enable AddressSanitizer." OFF )
OPTION(BUILD_OPT_BUILD_PACKAGES "Set to ON to generate CPack configuration files and packaging targets" OFF)
OPTION(BUILD_WITH_DEBUG_BOUNDSCHECK "Array/Pointer BoundsChecking, buffer overflow protection. Used in debug only." OFF)
option(BUILD_INSTALL_RESOURCES "Installs the Resources directory" ON)
IF(NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ELSE()
	MESSAGE(STATUS "Shared libraries enabled")
ENDIF(NOT BUILD_SHARED_LIBS)


# Set version of the project.
SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 1)
SET(VERSION_REVISION 0)
SET(VERSION_STATE a)
SET(VERSION ${VERSION_MAJOR}.${VERSION_MINOR}${VERSION_STATE}${VERSION_REVISION} )
SET(PROJECT_VERSION "${VERSION}")
ADD_DEFINITIONS(-DFV_VERSION="${VERSION}")

FIND_PACKAGE(Git QUIET)

ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/extern/fragcore EXCLUDE_FROM_ALL)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/Engine EXCLUDE_FROM_ALL)

# Testing and assertion and other.
#TODO attempt to remove so it works on all platforms.
IF(NOT ANDROID)
	IF(BUILD_WITH_TEST)
		ENABLE_TESTING()
		ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test/)
	ENDIF(BUILD_WITH_TEST)
ENDIF()

ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/samples)

# Create install package.
# IF ( BUILD_WITH_INSTALL )
# 	IF(CMAKE_CPACK_COMMAND AND UNIX) # AND BUILD_OPT_BUILD_PACKAGES
# 		# Packing information
# 		SET(CPACK_PACKAGE_NAME                    "fragcore${FRAG_VERSION_MAJOR}.${VERSION_MINOR}")
# 		SET(CPACK_PACKAGE_CONTACT "" CACHE STRING "Package maintainer and PGP signer.")
# 		SET(CPACK_PACKAGE_VENDOR                  "https://github.com/voldien/fragcore")
# 		SET(CPACK_PACKAGE_DISPLAY_NAME            "Frag ${VERSION}")
# 		SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY     " -  ${VERSION}")
# 		SET(CPACK_PACKAGE_VERSION                 "${VERSION}.${PACKAGE_VERSION}" )
# 		SET(CPACK_PACKAGE_VERSION_MAJOR           "${VERSION_MAJOR}")
# 		SET(CPACK_PACKAGE_VERSION_MINOR           "${VERSION_MINOR}")
# 		SET(CPACK_PACKAGE_VERSION_PATCH           "${VERSION_PATCH}")
# 		SET(CPACK_PACKAGE_INSTALL_DIRECTORY       "frag${VERSION_MAJOR}.${VERSION_MINOR}")
# 		SET(CPACK_RESOURCE_FILE_LICENSE           "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

# 		STRING(TOUPPER ${LIBFRAGCORE_COMPONENT}     "LIBFRAGCORE_COMPONENT_UPPER")
# 		STRING(TOUPPER ${LIBFRAGCORE-DEV_COMPONENT} "LIBFRAGCORE-DEV_COMPONENT_UPPER")

# 		#
# 		SET(CPACK_COMPONENT_FRAGCORE-BIN_DISPLAY_NAME                       "tools")
# 		SET(CPACK_COMPONENT_FRAGCORE-BIN_DEPENDS                            "${LIBFRAGCORE_COMPONENT}" )
# 		SET(CPACK_COMPOENTT_${LIBFRACORE_COMPONENT_UPPER}_DISPLAY_NAME "")
# 		SET(CPACK_COMPOENTT_${LIBFRACORE-DEV_COMPONENT_UPPER}_DISPLAY_NAME "")
# 		SET(CPACK_COMPONENT_${LIBFRACORE-DEV_COMPONENT_UPPER}_DEPENDS $    "{LIBFRAGCORE_COMPONENT}" )
# 		SET(CPACK_COMPOENTT_${LIBFRACORE-DEV_COMPONENT_UPPER}_DISPLAY_NAME "")
# 		SET(CPACK_COMPONENT_${LIBFRAGCORE_COMPONENT_UPPER}_DISPLAY_NAME     "libraries")
# 		SET(CPACK_COMPONENT_${LIBFRAGCORE-DEV_COMPONENT_UPPER}_DISPLAY_NAME "common headers and installs")
# 		SET(CPACK_COMPONENT_${LIBFRAGCORE-DEV_COMPONENT_UPPER}_DEPENDS $    "{LIBFRAGCORE_COMPONENT}" )
# 		SET(CPACK_COMPONENT_LIBFRAGCORE-DEV_DISPLAY_NAME                       "${CPACK_COMPONENT_${LIBFRAGCORE-DEV_COMPONENT}_DISPLAY_NAME}" )
# 		SET(CPACK_COMPONENT_LIBFRAGCORE-DEV_DEPENDS                            "${LIBFRAGCORE-DEV_COMPONENT}" )
# 		SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake zlib1g-dev pkg-config)

# 		# debian
# 		SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
# 		SET(CPACK_DEBIAN_CMAKE_OPTIONS    "")
# 		SET(CPACK_DEBIAN_PACKAGE_SECTION  "libs" )
# 		SET(CPACK_DEBIAN_PACKAGE_DEPENDS  "${CPACK_COMPONENTS_ALL}")
# 		SET(CPACK_DEBIAN_PACKAGE_SUGGESTS)
# 		SET(cPACK_DEBIAN_PACKAGE_NAME     "fragcore")
# 		SET(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES build doc obj samples packaging utils)
# 		SET(CPACK_DEBIAN_PACKAGE_SOURCE_COPY svn export --force)
# 		SET(CPACK_DEBIAN_CHANGELOG)
# 		execute_process(COMMAND lsb_release -is
# 			OUTPUT_VARIABLE _lsb_distribution OUTPUT_STRIP_TRAILING_WHITESPACE
# 			RESULT_VARIABLE _lsb_release_failed)
# 		SET(CPACK_DEBIAN_DISTRIBUTION_NAME ${_lsb_distribution} CACHE STRING "Name of the distrubiton")
# 		STRING(TOLOWER ${CPACK_DEBIAN_DISTRIBUTION_NAME} CPACK_DEBIAN_DISTRIBUTION_NAME)
# 		IF( ${CPACK_DEBIAN_DISTRIBUTION_NAME} STREQUAL "ubuntu" )
# 			SET(CPACK_DEBIAN_DISTRIBUTION_RELEASES lucid maverick natty oneiric precise CACHE STRING "Release code-names of the distrubiton release")
# 		ENDIF()
# 		SET(DPUT_HOST "" CACHE STRING "PPA repository to upload the debian sources")

# 		INCLUDE(CPack)
# 		INCLUDE(DebSourcePPA)
# 	ENDIF()
# ENDIF()
